set.seed(300)
#Spliting data as training and test set. Using createDataPartition() function from caret
indxTrain <- createDataPartition(y = Smarket$Direction,p = 0.75,list = FALSE)
training <- Smarket[indxTrain,]
testing <- Smarket[-indxTrain,]
#Checking distibution in origanl data and partitioned data
prop.table(table(training$Direction)) * 100
prop.table(table(testing$Direction)) * 100
prop.table(table(Smarket$Direction)) * 100
ctrl <- trainControl(method="repeatedcv",repeats = 2) #,classProbs=TRUE,summaryFunction = twoClassSummary)
knnFit <- train(Direction ~ ., data = training, method = "knn", trControl = ctrl, preProcess = c("center","scale"), tuneLength = 15)
confusionMatrix(predict(knnFit,newdata = testing ), testing$Direction )
mean(predict(knnFit,newdata = testing ) == testing$Direction)
knnFit
ctrl <- trainControl(method="repeatedcv",repeats = 3) #,classProbs=TRUE,summaryFunction = twoClassSummary)
knnFit <- train(Direction ~ ., data = training, method = "knn", trControl = ctrl, preProcess = c("center","scale"), tuneLength = 20)
knnFit
confusionMatrix(predict(knnFit,newdata = testing ), testing$Direction )
mean(predict(knnFit,newdata = testing ) == testing$Direction)
rfFit <- train(Direction ~ ., data = training, method = "rf", trControl = ctrl, preProcess = c("center","scale"), tuneLength = 20)
rfFit
confusionMatrix(predict(rfFit,newdata = testing ), testing$Direction )
mean(predict(knnFit,newdata = testing ) == testing$Direction)
mean(predict(rfFit,newdata = testing ) == testing$Direction)
plot(knnFit)
ctrl <- trainControl(method="repeatedcv",repeats = 3,classProbs=TRUE,summaryFunction = twoClassSummary)
knnFit <- train(Direction ~ ., data = training, method = "knn", trControl = ctrl, preProcess = c("center","scale"), tuneLength = 20)
#Output of kNN fit
knnFit
#Plotting yields Number of Neighbours Vs accuracy (based on repeated cross validation)
plot(knnFit)
#Get the confusion matrix to see accuracy value and other parameter values
confusionMatrix(predict(knnFit,newdata = testing ), testing$Direction )
mean(predict(knnFit,newdata = testing ) == testing$Direction)
plot(knnFit, print.thres = 0.5)
plot(knnFit, print.thres = 0.5, type="S")
set.seed(400)
ctrl <- trainControl(method="repeatedcv",repeats = 3) #,classProbs=TRUE,summaryFunction = twoClassSummary)
# Random forrest
rfFit <- train(Direction ~ ., data = training, method = "rf", trControl = ctrl, preProcess = c("center","scale"), tuneLength = 20)
rfFit
plot(rfFit)
confusionMatrix(predict(rfFit,newdata = testing ), testing$Direction )
mean(predict(rfFit,newdata = testing ) == testing$Direction)
#With twoclasssummary
ctrl <- trainControl(method="repeatedcv",repeats = 3,classProbs=TRUE,summaryFunction = twoClassSummary)
# Random forrest
rfFit <- train(Direction ~ ., data = training, method = "rf", trControl = ctrl, preProcess = c("center","scale"), tuneLength = 20)
rfFit
plot(rfFit)
confusionMatrix(predict(rfFit,newdata = testing ), testing$Direction )
mean(predict(rfFit,newdata = testing ) == testing$Direction)
rfFit[,"Down"]
rfFit[,"Direction"]
class(rfFit)
plot(rfFit, print.thres = 0.5, type="S")
rfPredict <- predict(rfFit,newdata = testing )
confusionMatrix(rfPredict, testing$Direction )
mean(rfPredict == testing$Direction)
rfPredict
rfPredict[,"Down"]
library(pROC)
knnPredict <- predict(knnFit,newdata = testing , type="prob")
knnPredict
knnPredict[,"Down"]
knnROC <- roc(testing$Direction,knnPredict[,"Down"], levels = rev(testing$Direction))
knnROC
plot(knnROC, type="S", print.thres= 0.5)
library(pROC)
rfPredict <- predict(rfFit,newdata = testing , type="prob")
rfROC <- roc(testing$Direction,rfPredict[,"Down"], levels = rev(testing$Direction))
rfROC
plot(rfROC, type="S", print.thres= 0.5)
url <- URLdecode("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip")
if (url.exists(url)) {
content <- getBinaryURL(url)
x <- unz(content)
alldata <- read.table(textconnection(x))
}
library(RCurl)
#help(package=RCurl)
url <- URLdecode("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip")
if (url.exists(url)) {
content <- getBinaryURL(url)
x <- unz(content)
alldata <- read.table(textconnection(x))
}
library(RCurl)
#help(package=RCurl)
url <- URLdecode("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip")
if (url.exists(url)) {
content <- getBinaryURL(url)
tmp <- tempfile()
write(content, file=tmp)
alldata <- read.table(unz(tmp),header = TRUE,sep = ';')
}
?unz
url <- URLdecode("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip")
if (url.exists(url)) {
content <- getBinaryURL(url)
tmp <- tempfile()
write(content, file=tmp)
alldata <- read.table(unz(tmp, filename="elect.zip"),header = TRUE,sep = ';')
}
unz(filename=tmp)
alldata <- read.table(unz(tmp, filename="elect.txt"))
content <- getBinaryURL(url)
content <- getBinaryURL(url)
tempzip <- paste(tmp,".zip")
tmp <- tempfile(fileext = ".zip")
write(content, file=tmp)
tmp
alldata <- read.table(unz(tmp, filename="elect.txt"),header = TRUE,sep = ';')
alldata <- read.table(unz(tmp, filename="household_power_consumption.txt",open = "r"),header = TRUE,sep = ';')
alldata <- read.csv(unz(tmp, filename="household_power_consumption.txt",open = "r"),header = TRUE,sep = ';')
unz(tmp, filename="household_power_consumption.txt",open = "r")
?zip.file.extract
alldata <- read.csv(zip.file.extract("household_power_consumption.txt",zipname=tmp), header = TRUE,sep = ";")
alldata <- read.csv(unzip(zipfile = tmp), header = TRUE,sep = ";")
?unzip
url <- URLdecode("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip")
zipfile <- "household_power_consumption.zip"
srcfile <- "household_power_consumption.txt"
setwd("/Users/njvijay/big_data/datascience_johnhopkins/exploratory_data_analysis/assignment1/ExData_Plotting1/src")
download.file(url = url,destfile = zipfile,method = curl)
unzip(zipfile = zipfile,files = srcfile)
setwd("/Users/njvijay/big_data/datascience_johnhopkins/exploratory_data_analysis/assignment1/ExData_Plotting1/src")
download.file(url = url,destfile = zipfile,method = "curl")
unzip(zipfile = zipfile,files = srcfile)
alldata <- read.table(srcfile, header = TRUE, sep = ";")
head(alldata)
print("Number of rows:")
print(nrows(alldata))
print(nrow(alldata))
print(ncol(alldata))
str(alldata)
?read.table
alldata <- read.table(srcfile, header = TRUE, sep = ";", stringAsFactors=TRUE)
print("Number of rows:")
print(nrow(alldata))
print("Number of columns:")
print(ncol(alldata))
str(alldata)
alldata <- read.table(srcfile, header = TRUE, sep = ";", stringAsFactors=FALSE)
print("Number of rows:")
print(nrow(alldata))
print("Number of columns:")
print(ncol(alldata))
str(alldata)
alldata <- read.table(srcfile, header = TRUE, sep = ";", stringsAsFactors=FALSE)
print("Number of rows:")
print(nrow(alldata))
print("Number of columns:")
print(ncol(alldata))
str(alldata)
?apply
test <- apply(alldata,2,as.numeric)
str(test)
head(test)
str(test)
test$Voltage
classes <- sapply(alldata,class)
classes
class(classes)
alldata <- read.table(srcfile, header = TRUE, sep = ";", stringsAsFactors=FALSE,colClasses = c(Date,chr,numeric,numeric,numeric,numeric,numeric,numeric,numeric))
alldata <- read.table(srcfile, header = TRUE, sep = ";", stringsAsFactors=FALSE,colClasses = c(chr,chr,numeric,numeric,numeric,numeric,numeric,numeric,numeric))
alldata <- read.table(srcfile, header = TRUE, sep = ";", stringsAsFactors=FALSE,colClasses = c(character,character,numeric,numeric,numeric,numeric,numeric,numeric,numeric))
alldata <- read.table(srcfile, header = TRUE, sep = ";", stringsAsFactors=FALSE,colClasses = c("character","character","numeric","numeric","numeric","numeric","numeric","numeric","numeric"))
alldata <- read.table(srcfile, header = TRUE, sep = ";", stringsAsFactors=FALSE,colClasses = c(rep("character",2),rep("numeric",7)))
colClasses = c(rep("cha
;
)
)
)
)
;
""
")
alldata <- read.table(srcfile, header = TRUE, sep = ";", colClasses = c(rep("character",2),rep("numeric",7)))
sampleData <- read.csv(srcfile, nrows = 5)
classes <- sapply(sampleData, class)
classes
classes
classes <- c(rep("character",2),rep("numeric",7))
classes
alldata <- read.table(srcfile, header = TRUE, sep = ";", colClasses = classes )
alldata <- read.table(srcfile, header = TRUE, sep = ";",dec = ".", colClasses = classes )
summary(str)
summary(alldata)
alldata <- read.table(srcfile, header = TRUE, sep = ";",dec = ".", na.strings = " ",colClasses = classes)
View(alldata)
is.na(alldata)
alldata <- read.table(srcfile, header = TRUE, sep = ";",dec = ".", na.strings = " ",colClasses = classes)
alldata <- read.table(srcfile, header = TRUE, sep = ";",dec = ".", na.strings = "?",colClasses = classes)
str(alldata)
?strptime
alldata$Date <- as.Date(alldata$Date)
str(alldata)
alldata <- read.table(srcfile, header = TRUE, sep = ";",dec = ".", na.strings = "?",colClasses = classes)
str(alldata)
alldata$Date <- as.Date(alldata$Date,"%d/%m/%Y")
str(alldata)
?subset
summary(alldata$Date)
alldata[alldata$Date =="2007-02-01" & alldata$Date == "2007-02-02",]
alldata$Date == as.Date("2007-02-01")
alldata[alldata$Date ==as.Date("2007-02-01") & alldata$Date == as.Date("2007-02-02"),]
subset(alldata, Date == as.Date("2007-02-01"))
subset(alldata, Date == as.Date("2007-02-01") & as.Date("2007-02-02"))
subset(alldata, Date == as.Date("2007-02-01") | Date == as.Date("2007-02-02"))
hshldpwr <- subset(alldata, Date == as.Date("2007-02-01") | Date == as.Date("2007-02-02"))
nrow(hshldpwr)
ncol(hshldpwd)
ncol(hshldpwr)
hist(hshldpwr$Global_active_power)
hist(hshldpwr$Global_active_power, xlab = "Global Active Power (kilowatts"),col = "red",main = "Global Active Power"
hist(hshldpwr$Global_active_power, xlab = "Global Active Power (kilowatts)",col = "red",main = "Global Active Power")
dev.copy(png, file = "plot1.png")
dev.off()
hshldpwr$weekdy <- weekdays(hshldpwr$Date)
head(hshldpwr)
plot(weekdy~Global_active_power,data = hshldpwr)
summary(hshldpwr)
plot(Global_active_power~weekdy,data = hshldpwr,type="l")
hshldpwrC <- hshldpwr[complete.cases(hshldpwr),]
hshldpwrC$weekdy <- weekdays(hshldpwrC$Date)
plot(Global_active_power~weekdy,data = hshldpwr,type="l")
plot(Global_active_power~weekdy,data = hshldpwrC,type="l")
hshldpwrC$weekdy <- factor(weekdays(hshldpwrC$Date))
hshldpwdC
hshldpwrC
str(hshldpwrC)
hshldpwrC$weekdy <- factor(weekdays(hshldpwrC$Date), levels=c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"))
str(hshldpwrC)
plot(Global_active_power~weekdy,data = hshldpwrC,type="l")
head(hshldpwrC)
plot(Global_active_power~weekdy,data = hshldpwrC,type="l", xlim=c("Thu","Fri","Sat"))
xlimfactor <- factor(c("Thu","Fri","Sat"), levels=c("Thursday","Friday","Saturday"))
plot(Global_active_power~weekdy,data = hshldpwrC,type="l", xlim=xlimfactor)
plot(Global_active_power~weekdy,data = hshldpwrC,type="l", xlim=c("Thursday","Saturday"))
plot(Global_active_power~weekdy,data = hshldpwrC,type="l", xlim=c(5,7))
hshldpwrC$weekdy <- weekday(hshldpwdC)
hshldpwrC$weekdy <- weekdays(hshldpwdC)
hshldpwrC$weekdy <- weekdays(hshldpwrC$Date)
plot(Global_active_power~weekdy,data = hshldpwrC,type="l", xlim=c(5,7))
plot(Global_active_power~Date,data = hshldpwrC,type="l")
nrow(hshldpwrC)
plot(zoo(hshldpwrC$Global_active_power,hshldpwrC$Date),type="l")
install.packages("zoo")
plot(zoo(hshldpwrC$Global_active_power,hshldpwrC$Date),type="l")
require(zoo)
plot(zoo(hshldpwrC$Global_active_power,hshldpwrC$Date),type="l")
str(hsldpwr)
str(hshldpwrC)
paste(hshldpwrC$Date, hshldpwrC$Time)
as.Date(paste(hshldpwrC$Date, hshldpwrC$Time))
as.Date(paste(hshldpwrC$Date, hshldpwrC$Time), "%Y-%m-%d %H:%M:%S")
strptime(paste(hshldpwrC$Date, hshldpwrC$Time), "%Y-%m-%d %H:%M:%S")
class(strptime(paste(hshldpwrC$Date, hshldpwrC$Time), "%Y-%m-%d %H:%M:%S"))
hshldpwrC$dttm <- strptime(paste(hshldpwrC$Date, hshldpwrC$Time), "%Y-%m-%d %H:%M:%S")
strptime(paste(hshldpwrC$Date, hshldpwrC$Time), "%Y-%m-%d %H:%M:%S")
str(hsldpwrC)
hshldpwrC
plot(zoo(hshldpwrC$Global_active_power,hshldpwrC$dttm),type="l")
plot(hshldpwrC$Global_active_power~hshldpwrC$dttm,type="l")
plot(hshldpwrC$dttm ~ hshldpwrC$Global_active_power,type="l")
plot(strptime(hshldpwrC$dttm,"%d/%m/%Y") ~ hshldpwrC$Global_active_power,type="l")
plot(as.Date(hshldpwrC$dttm,"%d/%m/%Y %H:%M") ~ hshldpwrC$Global_active_power,type="l")
plot(hshldpwrC$Global_active_power ~ as.Date(hshldpwrC$dttm,"%d/%m/%Y %H:%M") ,type="l")
plot(hshldpwrC$Global_active_power ~ hshldpwrC$dttm ,type="l")
plot(zoo(hshldpwrC$Global_active_power ,hshldpwrC$dttm),type="l")
?zoo
plot(x = hshldpwrC$dttm, y = hshldpwrC$Global_active_power, type="l")
plot(x = hshldpwrC$dttm, y = hshldpwrC$Global_active_power, type="l"
, ylab="Global Active Power (kilowatts)"
, xlab="")
dev.copy(png, file = "plot2.png")
dev.off()
plot(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_1, type="l"
, ylab="Engergy Sub metering"
, xlab="")
lines(hshldpwr$Sub_metering_2, col="red")
lines(hshldpwrC$Sub_metering_2, col="blue")
lines(hshldpwrC$Sub_metering_2, col="blue", type="l")
lines(hshldpwrC$Sub_metering_3, col="red", type="l")
plot(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_1, type="l"
, ylab="Engergy Sub metering"
, xlab="")
lines(hshldpwrC$Sub_metering_2, col="blue", type="l")
lines(hshldpwrC$Sub_metering_3, col="red", type="l")
url <- URLdecode("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip")
zipfile <- "household_power_consumption.zip"
srcfile <- "household_power_consumption.txt"
setwd("/Users/njvijay/big_data/datascience_johnhopkins/exploratory_data_analysis/assignment1/ExData_Plotting1/src")
download.file(url = url,destfile = zipfile,method = "curl")
unzip(zipfile = zipfile,files = srcfile)
classes <- c(rep("character",2),rep("numeric",7))
#There are questions marks in few variables. '?' needs to be interpreted as NA.
#na.strings paramater should help to interpret ? to NA.
alldata <- read.table(srcfile, header = TRUE, sep = ";",dec = ".", na.strings = "?",colClasses = classes)
#Type casting dataframe
str(alldata)
alldata$Date <- as.Date(alldata$Date,"%d/%m/%Y")
#Subsetting Date = '2007-02-01' || '2007-02-02' for graphics
hshldpwr <- subset(alldata, Date == as.Date("2007-02-01") | Date == as.Date("2007-02-02"))
nrow(hshldpwr)
ncol(hshldpwr)
#Remove NAs and take only complete cases for plot
hshldpwrC <- hshldpwr[complete.cases(hshldpwr),]
hshldpwrC$dttm <- strptime(paste(hshldpwrC$Date, hshldpwrC$Time), "%Y-%m-%d %H:%M:%S")
plot(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_1, type="l"
, ylab="Engergy Sub metering"
, xlab="")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_2, col="blue", type="l")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_3, col="red", type="l")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_3, col="blue", type="l")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_2, col="red", type="l")
plot(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_1, type="l"
, ylab="Engergy Sub metering"
, xlab="")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_2, col="red", type="l")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_3, col="blue", type="l")
plot(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_1, type="l"
, ylab="Engergy Sub metering"
, xlab="")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_2, col="red", type="l")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_3, col="blue", type="l")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col=c("black","red","blue"))
plot(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_1, type="l"
, ylab="Engergy Sub metering"
, xlab="")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_2, col="red", type="l")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_3, col="blue", type="l")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), lty=1,col=c("black","red","blue"))
#Copying image to bitmap device - png
dev.copy(png, file = "plot3.png")
dev.off()
plot(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_1, type="l"
, ylab="Engergy Sub metering"
, xlab="")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_2, col="red", type="l")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_3, col="blue", type="l")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
, lty=1,col=c("black","red","blue"), cex=0.5)
plot(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_1, type="l"
, ylab="Engergy Sub metering"
, xlab="")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_2, col="red", type="l")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_3, col="blue", type="l")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
, lty=1,col=c("black","red","blue"), pt.cex=0.8)
plot(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_1, type="l"
, ylab="Engergy Sub metering"
, xlab="")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_2, col="red", type="l")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_3, col="blue", type="l")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
, lty=1,col=c("black","red","blue"), pt.cex=0.5)
plot(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_1, type="l"
, ylab="Engergy Sub metering"
, xlab="")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_2, col="red", type="l")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_3, col="blue", type="l")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
, lty=1,col=c("black","red","blue"), pt.cex=1)
plot(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_1, type="l"
, ylab="Engergy Sub metering"
, xlab="")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_2, col="red", type="l")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_3, col="blue", type="l")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
, lty=1,col=c("black","red","blue"), cex=1.3, pt.cex=1)
plot(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_1, type="l"
, ylab="Engergy Sub metering"
, xlab="")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_2, col="red", type="l")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_3, col="blue", type="l")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
, lty=1,col=c("black","red","blue"), cex=0.5, pt.cex=1)
plot(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_1, type="l"
, ylab="Engergy Sub metering"
, xlab="")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_2, col="red", type="l")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_3, col="blue", type="l")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
, lty=1,col=c("black","red","blue"), cex=0.8, pt.cex=1)
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
, lty=1,col=c("black","red","blue"), pt.cex=1,cex=0.8)
plot(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_1, type="l"
, ylab="Engergy Sub metering"
, xlab="")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_2, col="red", type="l")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_3, col="blue", type="l")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
, lty=1,col=c("black","red","blue"), pt.cex=1,cex=0.8)
plot(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_1, type="l"
, ylab="Engergy Sub metering"
, xlab="")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_2, col="red", type="l")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_3, col="blue", type="l")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
, lty=1,col=c("black","red","blue"), pt.cex=1,cex=0.5)
plot(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_1, type="l"
, ylab="Engergy Sub metering"
, xlab="")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_2, col="red", type="l")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_3, col="blue", type="l")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
, lty=1,col=c("black","red","blue"), pt.cex=1,cex=0.7)
#Copying image to bitmap device - png
dev.copy(png, file = "plot3.png")
dev.off()
par(bty="l",las=1,lwd=1,cex=0.7,oma = c(1, 1, 0, 1), mar = c(3, 4, 3.5, 5))
plot(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_1, type="l"
, ylab="Engergy Sub metering"
, xlab="")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_2, col="red", type="l")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_3, col="blue", type="l")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
, lty=1,col=c("black","red","blue"), pt.cex=1,cex=0.7)
par(bty="l",las=1,lwd=1,cex=0.7,oma = c(1, 1, 0, 1), mar = c(3, 4, 3.5, 5))
plot(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_1, type="l"
, ylab="Engergy Sub metering"
, xlab="")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_2, col="red", type="l")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_3, col="blue", type="l")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
, lty=1,col=c("black","red","blue"))
#Copying image to bitmap device - png
dev.copy(png, file = "plot3.png")
dev.off()
png(filename = "plot3.png")
#par(bty="l",las=1,lwd=1,cex=0.7,oma = c(1, 1, 0, 1), mar = c(3, 4, 3.5, 5))
plot(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_1, type="l"
, ylab="Engergy Sub metering"
, xlab="")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_2, col="red", type="l")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_3, col="blue", type="l")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
, lty=1,col=c("black","red","blue"))
#Copying image to bitmap device - png
dev.off()
zipfile <- "household_power_consumption.zip"
srcfile <- "household_power_consumption.txt"
classes <- c(rep("character",2),rep("numeric",7))
#There are questions marks in few variables. '?' needs to be interpreted as NA.
#na.strings paramater should help to interpret ? to NA.
alldata <- read.table(srcfile, header = TRUE, sep = ";",dec = ".", na.strings = "?",colClasses = classes)
#Type casting dataframe
str(alldata)
#Converting Date variable into Date data type
alldata$Date <- as.Date(alldata$Date,"%d/%m/%Y")
#Subsetting Date = '2007-02-01' || '2007-02-02' for graphics
hshldpwr <- subset(alldata, Date == as.Date("2007-02-01") | Date == as.Date("2007-02-02"))
nrow(hshldpwr)
ncol(hshldpwr)
#Remove NAs and take only complete cases for plot
hshldpwrC <- hshldpwr[complete.cases(hshldpwr),]
hshldpwrC$dttm <- strptime(paste(hshldpwrC$Date, hshldpwrC$Time), "%Y-%m-%d %H:%M:%S")
par(mfrow = c(2,2))
#First plot on first row first column
plot(x = hshldpwrC$dttm, y = hshldpwrC$Global_active_power, type="l"
, ylab="Global Active Power (kilowatts)"
, xlab="")
#Second plot of first row second column
plot(x = hshldpwrC$dttm, y = hshldpwrC$Voltage, type="l"
, ylab="Voltage"
, xlab="datetime")
par(mfrow = c(2,2))
#First plot in first row first column
plot(x = hshldpwrC$dttm, y = hshldpwrC$Global_active_power, type="l"
, ylab="Global Active Power (kilowatts)"
, xlab="")
#Second plot in first row second column
plot(x = hshldpwrC$dttm, y = hshldpwrC$Voltage, type="l"
, ylab="Voltage"
, xlab="datetime")
#Third plot in second row first column
plot(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_1, type="l"
, ylab="Engergy Sub metering"
, xlab="")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_2, col="red", type="l")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_3, col="blue", type="l")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
, lty=1,col=c("black","red","blue"))
#Fourth plot in second row second column
plot(x = hshldpwrC$dttm, y = hshldpwrC$Global_reactive_power, type="l"
, ylab="Global_reactive_power"
, xlab="datetime")
plot(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_1, type="l"
, ylab="Engergy Sub metering"
, xlab="")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_2, col="red", type="l")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_3, col="blue", type="l")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
, lty=1,col=c("black","red","blue"))
plot(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_1, type="l"
, ylab="Engergy Sub metering"
, xlab="")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_2, col="red", type="l")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_3, col="blue", type="l")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
, lty=1,lwd=2,pch=21,col=c("black","red","blue"))
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
, lty=1,lwd=2,col=c("black","red","blue"))
plot(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_1, type="l"
, ylab="Engergy Sub metering"
, xlab="")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_2, col="red", type="l")
lines(x = hshldpwrC$dttm, y = hshldpwrC$Sub_metering_3, col="blue", type="l")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
, lty=1,lwd=2,col=c("black","red","blue"),bty="n",cex=0.8,inset=0.01)
